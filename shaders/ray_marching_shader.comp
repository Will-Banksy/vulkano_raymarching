#version 450

const float EPSILON = 0.01;

const uint SHAPE_TYPE_NONE = 0;
const uint SHAPE_TYPE_SPHERE = 1;
const uint SHAPE_TYPE_WOBBLY_SPHERE = 2;
const uint SHAPE_TYPE_MANDELBULB = 3;

const float PI = 3.1415;

struct Ray {
	vec3 origin;
	vec3 direction;
};

struct Shape {
	vec3 position;
	vec3 size;
	vec3 albedo;
	uint shape_type;
};

// ============================

// Work group size
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;

// Descriptor 0 in set 0
layout(set = 0, binding = 0) uniform SceneInfo {
	vec3 camera_pos;
	vec3 look_at;
	float canvas_dist;
	uint num_shapes;
	vec3 point_light;
	vec3 light_colour;
	Shape[10] shapes;
} scene;

// Descriptor 1 in set 0
layout(set = 0, binding = 1, rgba8) uniform writeonly image2D img;

layout(set = 0, binding = 2) buffer DebugInfo {
	vec3 ray_origin;
	vec3 ray_direction;
} debug_info;

// ============================

// Read: https://www.scratchapixel.com/lessons/3d-basic-rendering/get-started
// about perspective cameras and frustums and all that stuff

// Using my own brain-derived method that probably sucks ass but hey ho
// uv_up_world is an UP vector in world space: (0, 1, 0)
Ray create_camera_ray(vec3 cam_pos, vec3 target, float canv_dist, vec3 uv_up_world) {
	vec3 cam_dir = normalize(target - cam_pos);
	vec3 uv_right = normalize(cross(cam_dir, uv_up_world));
	vec3 uv_down = normalize(cross(cam_dir, uv_right));
	vec3 to_canvas = cam_dir * canv_dist;
	vec2 canv_size = imageSize(img);
	vec2 i = (vec2(gl_GlobalInvocationID.xy) / canv_size) * 2 - 1;
	// i -= canv_size / 2;
	vec3 ray_pos = cam_pos + to_canvas + (uv_right * i.x) + (uv_down * i.y);
	vec3 ray_dir = normalize(ray_pos - cam_pos);

	return Ray(cam_pos, ray_dir);
}

// ============================

// Polynomial smooth min (mix factor): https://iquilezles.org/articles/smin/
vec2 smooth_min(float a, float b, float k) {
	float h = max(k - abs(a - b), 0.0) / k;
	float m = h * h * 0.5;
	float s = m * k * (1.0 / 2.0);

	return (a < b) ? vec2(a - s, m) : vec2(b - s, 1.0 - m);
}

const uint BLEND_MODE_NONE = 0;
const uint BLEND_MODE_INTERSECTION = 1;
const uint BLEND_MODE_DIFFERENCE = 2;
const uint BLEND_MODE_SMOOTH = 3;

vec4 combine(float dist0, vec3 col0, float dist1, vec3 col1, uint blend_mode, float blend_strength) {
	float dist = dist0;
	vec3 colour = col0;

	if(blend_mode == BLEND_MODE_INTERSECTION) {
		if(dist1 > dist0) {
			dist = dist1;
			colour = col1;
		}
	} else if(blend_mode == BLEND_MODE_DIFFERENCE) {
		if(-dist1 > dist0) {
			dist = -dist1;
			colour = col1;
		}
	} else if(blend_mode == BLEND_MODE_SMOOTH) {
		vec2 min_and_mix_factor = smooth_min(dist0, dist1, blend_strength);//vec2(mix(dist0, dist1, 0.5), 0.5);
		dist = min_and_mix_factor.x;
		colour = mix(col0, col1, min_and_mix_factor.y);
	} else { // Assume BLEND_MODE_NONE
		if(dist1 < dist0) {
			dist = dist1;
			colour = col1;
		}
	}

	return vec4(colour, dist);
}

// ============================

float sdf_sphere(vec3 origin, vec3 sph_centre, float sph_radius) {
	return distance(origin, sph_centre) - sph_radius;
}

float sdf_wobbly_sphere(vec3 origin, vec3 sph_centre, float sph_radius) {
	return sdf_sphere(origin, sph_centre, sph_radius) + (sin(5 * origin.x) + sin(5 * origin.y) + sin(5 * origin.z) * 0.025);
}

// I do not understand this at all
// http://blog.hvidtfeldts.net/index.php/2011/09/distance-estimated-3d-fractals-v-the-mandelbulb-different-de-approximations/
float sdf_mandelbulb(vec3 origin) {
	const uint iters = 15;
	const float bailout = 2;
	const float power = 8;

	vec3 z = origin;
	float dr = 1.0;
	float r = 0.0;
	for(uint i = 0; i < iters; i++) {
		r = length(z);
		if(r > bailout) {
			break;
		}

		// Convert to polar coords
		float theta = acos(z.z / r);
		float phi = atan(z.y, z.x);
		dr = pow(r, power - 1.0) * power * dr + 1.0;

		// Scale and rotate the point
		float zr = pow(r, power);
		theta = theta * power;
		phi = phi * power;

		// Convert back to cartesian coords
		z = zr * vec3(sin(theta) * cos(phi), sin(phi) * sin(theta), cos(theta));
		z += origin;
	}

	float dist = 0.5 * log(r) * r / dr;
	return dist;
}

float sdf_shape(vec3 origin, Shape shape) {
	if(shape.shape_type == SHAPE_TYPE_SPHERE) {
		return sdf_sphere(origin, shape.position, shape.size.x);
	} else if(shape.shape_type == SHAPE_TYPE_WOBBLY_SPHERE) {
		return sdf_wobbly_sphere(origin, shape.position, shape.size.x);
	} else if(shape.shape_type == SHAPE_TYPE_MANDELBULB) {
		return sdf_mandelbulb(origin);
	} else {
		return 999;//1.0 / 0.0; // Infinity
	}
}

vec4 sdf_scene(vec3 origin) {
	if(scene.num_shapes == 0) {
		return vec4(0, 0, 0, 1.0 / 0.0);
	}

	float val = sdf_shape(origin, scene.shapes[0]);
	vec3 colour = scene.shapes[0].albedo;

	for(uint i = 1; i < scene.num_shapes; i++) {
		float sdf = sdf_shape(origin, scene.shapes[i]);

		vec4 comb = combine(val, colour, sdf, scene.shapes[i].albedo, BLEND_MODE_NONE, 0.1);
		val = comb.w;
		colour = comb.xyz;
	}

	return vec4(colour, val);
}

// ============================

// Estimate the normal by calculating the 3d gradient of the distance field - Not entirely sure how this works ngl (https://michaelwalczyk.com/blog-ray-marching.html)
vec3 estimate_normal(vec3 p) {
	vec3 small_step = vec3(EPSILON, 0.0, 0.0);

	float gradient_x = sdf_scene(p + small_step.xyy).w - sdf_scene(p - small_step.xyy).w;
	float gradient_y = sdf_scene(p + small_step.yxy).w - sdf_scene(p - small_step.yxy).w;
	float gradient_z = sdf_scene(p + small_step.yyx).w - sdf_scene(p - small_step.yyx).w;

	return normalize(vec3(gradient_x, gradient_y, gradient_z));
}

// Diffuse shading
// https://www.scratchapixel.com/lessons/3d-basic-rendering/introduction-to-shading/diffuse-lambertian-shading
// https://michaelwalczyk.com/blog-ray-marching.html
vec3 shade(vec3 point, vec3 col) {
	vec3 dir_to_light = normalize(scene.point_light - point);
	vec3 normal = estimate_normal(point);
	float diffuse_intensity = max(0.0, dot(normal, dir_to_light));

	// col / PI?
	return (col) * scene.light_colour * diffuse_intensity;
}

// ============================

// Returns colour
vec4 march_ray() {
	// if(scene.camera_pos != vec3(0.0, 0.0, 300.0)) {
	// 	return vec3(1.0, 1.0, 0.0);
	// }
	// if(scene.look_at != vec3(0.0)) {
	// 	return vec3(0.0, 1.0, 0.0);
	// }
	// if(scene.shapes[0].shape_type != SHAPE_TYPE_SPHERE) { // DEBUG
	// 	return vec3(1.0, 1.0, 1.0);
	// }

	Ray ray = create_camera_ray(scene.camera_pos, scene.look_at, scene.canvas_dist, vec3(0.0, 1.0, 0.0));

	float max_dist = 800;
	float sdf = 0;
	float march_steps = 0;
	vec3 overall_colour = vec3(0.0);

	while(sdf <= max_dist) {
		march_steps += 1;
		vec4 sdf_info = sdf_scene(ray.origin);
		vec3 colour = sdf_info.xyz;
		sdf = sdf_info.w;
		if(sdf < EPSILON) {
			overall_colour = shade(ray.origin, colour);//colour;
			break;
		}/* else if(sdf_scene == (1.0 / 0.0)) { // DEBUG
			return vec3(1.0, 0.4, 0.0);
		} else if(sdf_scene == 999) {
			return vec3(1.0, 1.0, 1.0);
		} else if(sdf_scene == 998) {
			if(gl_GlobalInvocationID.xy == uvec2(512, 512)) {
				debug_info.ray_origin = ray.origin;
				debug_info.ray_direction = ray.direction;
			}
			return vec3(1.0, 1.0, 0.0);
		}*/
		vec3 advance = ray.direction * sdf;
		// return abs(normalize(advance));
		ray.origin += advance;
	}

	float outline_glow_amt = 0.02 * (clamp(march_steps - 0, 0, 50) /*/ 2 + 5*/);

	const vec3 outline_glow_colour = vec3(1.0, 0.0, 0.9);

	return vec4(mix(overall_colour, outline_glow_colour, outline_glow_amt), sdf);
}

// ============================

void main() {
	if(gl_GlobalInvocationID.xy == uvec2(512, 512)) {
		debug_info.ray_origin = vec3(0);
		debug_info.ray_direction = vec3(0);
	}

	vec4 colour = vec4(vec3(march_ray()), 1.0);
	colour.xyzw = colour.zyxw; // Transforming from RGBA to BGRA
	// ff 66 00 --
	// 00 66 ff --

	imageStore(img, ivec2(gl_GlobalInvocationID.xy), colour);
}